{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "logicAppName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "logicAppLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2",
        "koreacentral",
        "koreasouth",
        "francecentral",
        "francesouth"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    }
  },
  "variables": {},
  "resources": [
    {
      "name": "[parameters('logicAppName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('logicAppLocation')]",
      "tags": {
        "displayName": "LogicApp"
      },
      "apiVersion": "2016-06-01",
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "For_each_Orders": {
              "type": "Foreach",
              "foreach": "@body('OrderModule_Search')?['customerOrders']",
              "actions": {
                "Compose_JSON_to_XML": {
                  "type": "Compose",
                  "inputs": "@xml(outputs('Compose_Order_Properties'))",
                  "runAfter": {
                    "Compose_Order_Properties": [
                      "Succeeded"
                    ]
                  }
                },
                "Compose_OrderStatus": {
                  "type": "Compose",
                  "inputs": "@setProperty(body('OrderModule_GetById'),'status', 'Exported and Awaiting Shipping')",
                  "runAfter": {
                    "OrderModule_GetById": [
                      "Succeeded"
                    ]
                  }
                },
                "Compose_Order_Properties": {
                  "type": "Compose",
                  "inputs": {
                    "Order": {
                      "AccountCode": "@body('Filter_array_AccountCode')?[0]?['values']?[0]?['value']",
                      "CommentsTable": {
                        "Comment": "@items('For_each_Orders')?['comment']"
                      },
                      "DeliveryAddress": {
                        "CountryCode": " @items('For_each_Orders')?['shipments']?[0]?['deliveryAddress']?['countryCode']",
                        "Line1": "@items('For_each_Orders')?['shipments']?[0]?['deliveryAddress']?['Line1']",
                        "Line2": "@items('For_each_Orders')?['shipments']?[0]?['deliveryAddress']?['Line2']",
                        "Line3": "@items('For_each_Orders')?['shipments']?[0]?['deliveryAddress']?['Line3']",
                        "Line4": "@items('For_each_Orders')?['shipments']?[0]?['deliveryAddress']?['regionName']",
                        "Line5": "@items('For_each_Orders')?['shipments']?[0]?['deliveryAddress']?['city']",
                        "PostCode": "@items('For_each_Orders')?['shipments']?[0]?['deliveryAddress']?['postalCode']"
                      },
                      "ProductTable": [
                        "@variables('ProductArray')"
                      ],
                      "Reference": "@items('For_each_Orders')?['number']",
                      "Referral": "@body('Filter_array_Referral')?[0]?['values']?[0]?['value']",
                      "SalesPerson": "@items('For_each_Orders')?['storeId']",
                      "ShipMethod": "@items('For_each_Orders')?['shipments']?[0]?['shippingMethod']?['code']"
                    }
                  },
                  "runAfter": {
                    "For_each_Items": [
                      "Succeeded"
                    ]
                  }
                },
                "Create_file": {
                  "runAfter": {
                    "Set_FileName_variable": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiConnection",
                  "inputs": {
                    "body": "@outputs('Compose_JSON_to_XML')",
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['ftp']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/datasets/default/files",
                    "queries": {
                      "folderPath": "/",
                      "name": "@variables('FileName')",
                      "queryParametersSingleEncoded": true
                    }
                  },
                  "runtimeConfiguration": {
                    "contentTransfer": {
                      "transferMode": "Chunked"
                    }
                  }
                },
                "CustomerModule_GetMemberById": {
                  "runAfter": {},
                  "metadata": {
                    "apiDefinitionUrl": "@{concat(variables('Url'),'//docs/VirtoCommerce.Customer/v1')}",
                    "swaggerSource": "custom"
                  },
                  "type": "Http",
                  "inputs": {
                    "headers": {
                      "api_key": "@{variables('Api_key')}"
                    },
                    "method": "get",
                    "queries": {
                      "['customerId'])}": ""
                    },
                    "uri": "@{concat(variables('Url'),'/api/members/', encodeURIComponent(items('For_each_Orders')?['customerId']))}"
                  }
                },
                "Filter_array_AccountCode": {
                  "type": "Query",
                  "inputs": {
                    "from": "@body('CustomerModule_GetMemberById')?['dynamicProperties']",
                    "where": "@equals(item()?['name'], 'AccountCode')"
                  },
                  "runAfter": {
                    "CustomerModule_GetMemberById": [
                      "Succeeded"
                    ]
                  }
                },
                "Filter_array_Referral": {
                  "type": "Query",
                  "inputs": {
                    "from": "@body('CustomerModule_GetMemberById')?['dynamicProperties']",
                    "where": "@equals(item()?['name'], 'Referral')"
                  },
                  "runAfter": {
                    "Filter_array_AccountCode": [
                      "Succeeded"
                    ]
                  }
                },
                "For_each_Items": {
                  "type": "Foreach",
                  "foreach": "@items('For_each_Orders')['items']",
                  "actions": {
                    "Append_to_array_variable": {
                      "type": "AppendToArrayVariable",
                      "inputs": {
                        "name": "ProductArray",
                        "value": "@outputs('Compose_Items')"
                      },
                      "runAfter": {
                        "Compose_Items": [
                          "Succeeded"
                        ]
                      }
                    },
                    "Compose_Items": {
                      "type": "Compose",
                      "inputs": {
                        "Description": "@items('For_each_Items')?['name']",
                        "ProductCode": "@items('For_each_Items')?['sku']",
                        "Quantity": "@items('For_each_Items')?['quantity']"
                      },
                      "runAfter": {}
                    }
                  },
                  "runAfter": {
                    "ReSet_ProductArray_variable": [
                      "Succeeded"
                    ]
                  }
                },
                "OrderModule_GetById": {
                  "runAfter": {
                    "Compose_JSON_to_XML": [
                      "Succeeded"
                    ]
                  },
                  "metadata": {
                    "apiDefinitionUrl": "@{concat(variables('Url'),'//docs/VirtoCommerce.Orders/v1/')}",
                    "swaggerSource": "custom"
                  },
                  "type": "Http",
                  "inputs": {
                    "headers": {
                      "api_key": "@{variables('Api_key')}"
                    },
                    "method": "get",
                    "queries": {
                      "respGroup": "full"
                    },
                    "uri": "@{concat(variables('Url'),'/api/order/customerOrders/',encodeURIComponent(items('For_each_Orders')?['id']))}"
                  }
                },
                "OrderModule_Update": {
                  "runAfter": {
                    "Compose_OrderStatus": [
                      "Succeeded"
                    ]
                  },
                  "metadata": {
                    "apiDefinitionUrl": "@{concat(variables('Url'),'//docs/VirtoCommerce.Orders/v1/')}",
                    "swaggerSource": "custom"
                  },
                  "type": "Http",
                  "inputs": {
                    "body": "@outputs('Compose_OrderStatus')",
                    "headers": {
                      "api_key": "@{variables('Api_key')}"
                    },
                    "method": "put",
                    "uri": "@{concat(variables('Url'),'/api/order/customerOrders/')}"
                  }
                },
                "ReSet_ProductArray_variable": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "ProductArray",
                    "value": []
                  },
                  "runAfter": {
                    "Filter_array_Referral": [
                      "Succeeded"
                    ]
                  }
                },
                "Set_FileName_variable": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "FileName",
                    "value": "@{concat(items('For_each_Orders')?['number'],'.xml')}"
                  },
                  "runAfter": {
                    "OrderModule_Update": [
                      "Succeeded"
                    ]
                  }
                }
              },
              "runAfter": {
                "OrderModule_Search": [
                  "Succeeded"
                ]
              }
            },
            "Initialize_Api_key_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Api_key",
                    "type": "String",
                    "value": ""
                  }
                ]
              },
              "runAfter": {
                "Initialize_Url_variable": [
                  "Succeeded"
                ]
              }
            },
            "Initialize_FileName_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "FileName",
                    "type": "String"
                  }
                ]
              },
              "runAfter": {
                "Initialize_ProductArray_variable": [
                  "Succeeded"
                ]
              }
            },
            "Initialize_ProductArray_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ProductArray",
                    "type": "Array"
                  }
                ]
              },
              "runAfter": {}
            },
            "Initialize_Url_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "Url",
                    "type": "String",
                    "value": "https://vc-platform"
                  }
                ]
              },
              "runAfter": {
                "Initialize_FileName_variable": [
                  "Succeeded"
                ]
              }
            },
            "OrderModule_Search": {
              "runAfter": {
                "Initialize_Api_key_variable": [
                  "Succeeded"
                ]
              },
              "metadata": {
                "apiDefinitionUrl": "@{concat(variables('Url'),'//docs/VirtoCommerce.Orders/v1/')}",
                "swaggerSource": "custom"
              },
              "type": "Http",
              "inputs": {
                "body": {
                  "status": "Awaiting Shipping"
                },
                "headers": {
                  "api_key": "@{variables('Api_key')}"
                },
                "method": "post",
                "uri": "@{concat(variables('Url'),'/api/order/customerOrders/search')}"
              }
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "Recurrence": {
              "type": "Recurrence",
              "recurrence": {
                "frequency": "Day",
                "interval": 1,
                "timeZone": "UTC",
                "startTime": "2019-10-28T00:00:10Z"
              }
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "ftp": {
                "id": "",
                "connectionId": "",
                "connectionName": ""
              }
            }
          }
        }
      }
    }
  ],
  "outputs": {}
}